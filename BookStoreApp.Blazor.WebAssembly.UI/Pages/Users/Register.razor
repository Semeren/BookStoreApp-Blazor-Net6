@page "/users/register"
@inject IClient httpClient
@inject NavigationManager navManager
<h3>Register New Account</h3>

@if(string.IsNullOrEmpty(message) == false)
{
    <div class="alert alert-danger">
        <p>@message</p>
    </div>
}

<div class="card-body">
    <EditForm Model="registrationModel" OnValidSubmit="HandleRegistration" class="row g-3">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="col-md-6">
            <label for="email" class="form-label">Email Address</label>
            <InputText type="email" class="form-control" @bind-Value="registrationModel.Email"/>
            <ValidationMessage For="@(() => registrationModel.Email)" />
        </div>
        <div class="col-md-6">
            <label for="password" class="form-label">Passsword</label>
            <InputText class="form-control" type="password" @bind-Value="registrationModel.Password"/>
            <ValidationMessage For="@(() => registrationModel.Password)" />
        </div>
        <div class="col-12">
            <label for="firstName" class="form-label">First Name</label>
            <InputText type="text" class="form-control" @bind-Value="registrationModel.FirstName"/>
            <ValidationMessage For="@(() => registrationModel.FirstName)" />
        </div>
        <div class="col-12">
            <label for="lastName" class="form-label">Last Name</label>
            <InputText type="text" class="form-control" @bind-Value="registrationModel.Lastname"/>
            <ValidationMessage For="@(() => registrationModel.Lastname)" />
        </div>
        <div class="col-12">
            <button type="submit" class="btn btn-primary btn-block">Register</button>
        </div>
    </EditForm>
</div>


@code {
    UserDto registrationModel = new UserDto
    {
        Role = "User"
    };

    string message = string.Empty;

    private async Task HandleRegistration()
    {
        try
        {
            await httpClient.RegisterAsync(registrationModel);
            NavigatetoLogin();
        }
        catch(ApiException ex)
        {
            if(ex.StatusCode >= 200 && ex.StatusCode <= 299)
            {
                NavigatetoLogin();
            }
            else
            {
                message = ex.Response;

            }

        }
        catch(Exception ex)
        {
            message = ex.Message;
        }
    }

    private void NavigatetoLogin()
    {
        navManager.NavigateTo("counter");
    }

}
