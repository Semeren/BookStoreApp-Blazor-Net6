@page "/books/update/{id:int}"
@attribute [Authorize(Roles ="Administrator")]
@inject IBookService bookService
@inject IAuthorService authorService
@inject NavigationManager navManager

<h3>Update Book</h3>


<EditForm Model="Book" OnValidSubmit="HandleUpdateBook" class="row g-3">
    <DataAnnotationsValidator />
    <ValidationSummary />
        <div class="col-12">
            <label for="Title" class="form-label">Book Title</label>
            <InputText type="text" class="form-control" @bind-Value="Book.Title" id="title"/>
            <ValidationMessage For="@(() => Book.Title)" />
        </div>
        <br/>
        <div class="col-md-6">
            <label for="isbn" class="form-label">ISBN</label>
            <InputText class="form-control" type="text" @bind-Value="Book.Isbn" id="isbn"/>
            <ValidationMessage For="@(() => Book.Isbn)" />
        </div>
        <div class="col-md-6">
            <label for="price" class="form-label">Price</label>
            <InputNumber class="form-control" @bind-Value="Book.Price" id="price"/>
            <ValidationMessage For="@(() => Book.Price)" />
        </div>
        <br/>
        <div class="col-12">
            <label for="year" class="form-label">Year</label>
            <InputNumber class="form-control" @bind-Value="Book.Year" id="year"/>
            <ValidationMessage For="@(() => Book.Year)" />
        </div>
        <br/>
        <div class="col-12">
            <label for="Summary" class="form-label">Book Summary</label>
            <InputTextArea type="TextArea" class="form-control" @bind-Value="Book.Summary" id="summary"/>
            <ValidationMessage For="@(() => Book.Summary)" />
        </div>
        <br/>
        <div class="col-12">
            <label for="author" class="form-label">Author</label>
            <InputSelect  class="form-select" @bind-Value="Book.AuthorId" id="author">
                <option value="">-- Select Author --</option>
                @foreach(var author in Authors)
                {
                    <option value ="@author.Id">@author.FirstName @author.LastName</option>
                }
        </InputSelect>
        <ValidationMessage For="@(() => Book.AuthorId)" />
        </div>
        <br/>
        <div class="col-12">
            <label>Book Cover Photo</label>
            <div>
                <InputFile OnChange="HandleFileSelection" />
                <img src="@img" width="100" height="100" class="img-thumbnail" >
                <p class = "text-danger">@UploadFileWarning</p>
            </div>
        </div>
        <br/>
        <div class="col-12">
            <button type="submit" class="btn btn-primary btn-block">
                <span class="oi oi-pencil"></span>
                Create Book
            </button>
             <button @onclick="BackToList"  class="btn btn-outline-secondary" type="button">
                <span class="oi oi-media-skip-backward"></span>
               Back to List
            </button>
        </div>

</EditForm>
@code {
    [Parameter]
    public int id { get; set; }

    private BookUpdateDto Book = new BookUpdateDto();
    private List<AuthorReadOnlyDto> Authors= new();

    private string img = String.Empty;
    private string UploadFileWarning = string.Empty;
    private long maxFileSize = 1024 * 1024 * 5;

    protected override async Task OnInitializedAsync()
    {
        var bookResponse =  await bookService.GetForUpdate(id);
        if (bookResponse.Success)
        {
            Book = bookResponse.Data;
            img = Book.Image;
        }

        var authorResponse =  await authorService.GetAll();
        if (authorResponse.Success)
        {
            Authors = authorResponse.Data;
        }
    }

    private async Task HandleFileSelection(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            if(file.Size > maxFileSize)
            {
                UploadFileWarning = "This file is too big for upload";
                
            }

            var ext = System.IO.Path.GetExtension(file.Name);

            if (ext.ToLower().Contains("jpg") || ext.ToLower().Contains("png") || ext.ToLower().Contains("jpeg"))
            {
                UploadFileWarning = "Please select a valid image file (*.jpg, *.png)";
                return;
            }

            var byteArray = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(byteArray);
            string imageType = file.ContentType;
            string base64String = Convert.ToBase64String(byteArray);

            Book.ImageData = base64String;
            Book.OriginalImageName = file.Name;
            img = $"data:{imageType}; base64, {base64String}";
        }
    }

    private async Task HandleUpdateBook()
    {
        var response = await bookService.Edit(id, Book);
        if (response.Success)
        {
            BackToList();
        }
    }

    private void BackToList()
    {
        navManager.NavigateTo("/books/");
    }
}